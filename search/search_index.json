{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coursectl The coursectl is a CLI tool for managing courses on instances of community app . Currently, this is used for authoring courses on Mon School . This allows the course creators to: write the course material in markdown using their favorite editor preview it locally using mkdocs for material push the changes to the server using coursectl This also allows the course creators to push the course to multiple sites. For example, keep pushing to a staging website to show the preview with a small group and push to the main site after it is ready. Documentation: https://fossunited.github.com/coursectl Source Code: https://github.com/fossunited/coursectl","title":"Coursectl"},{"location":"#coursectl","text":"The coursectl is a CLI tool for managing courses on instances of community app . Currently, this is used for authoring courses on Mon School . This allows the course creators to: write the course material in markdown using their favorite editor preview it locally using mkdocs for material push the changes to the server using coursectl This also allows the course creators to push the course to multiple sites. For example, keep pushing to a staging website to show the preview with a small group and push to the main site after it is ready. Documentation: https://fossunited.github.com/coursectl Source Code: https://github.com/fossunited/coursectl","title":"Coursectl"},{"location":"getting-started/","text":"Getting Started Installation To install coursectl , install the following command from command-line: $ pip install https://github.com/fossunited/coursectl/zipball/main Configuration Using coursectl requires api key and api secret. Please ask the admin of the platform to create api key and secret for you. Once you have the api key and secret, use the following command to configure coursectl . $ coursectl configure frappe_site_url: https://mon.school/ frappe_api_key: XXXXX frappe_api_secret: YYYYY Once you configure coursectl you can verify it using the whoami command. $ coursectl whoami foo@bar.com TODO: explain about using multiple profiles Clone Your Course The first step after you configure your environment is to clone your course. $ coursectl clone the-joy-of-programming ... This command will clone the specified course, all its chapters, lessons and exercises and saves them to the current directory. The directory strucutre will be in the following structure: . \u251c\u2500\u2500 course.yml \u251c\u2500\u2500 getting-started-jp \u2502 \u251c\u2500\u2500 hello-joy-jp.md \u2502 \u2514\u2500\u2500 hello-python-jp.md \u251c\u2500\u2500 drawing-shapes-jp \u2502 \u251c\u2500\u2500 drawing-circles-jp.md \u2502 \u251c\u2500\u2500 lines-and-polygons-jp.md \u251c\u2500\u2500 exercises \u2502 \u251c\u2500\u2500 circle-jp.yml \u2502 \u251c\u2500\u2500 concentric-circles-x3-jp.yml \u2502 \u251c\u2500\u2500 draw-rectangle-jp.yml \u2502 \u251c\u2500\u2500 six-circles-in-a-line-jp.yml The course.yml file will contain the information about the course and all the chapters. There will be one directory for each chapter and each lesson in that chapter will be stored as a markdown file. All the exercisies are placed in the exercises/ diirectory as YAML files. Editing Course and Chapters The course and chapter info is stored in the course.yml file. This file must be edited to update the following: title of the course short intro of the course description of the course title of a chapter description of a chapter lessons that are part of a chapter Let's understand the format of the course.yml file. name: the-joy-of-programming is_published: 1 title: The Joy of Programming short_introduction: 'Start your journey into the magical world of programming, by writing programs to create amusing patterns. ' description: | Programming is fun. How about learning programming by writing programs to make the computer draw interesting shapes? In this course, you'll write programs to draw simple shapes and move on to draw more and more complex shapes by applying different ideas of programming introduced gradually through out the course. chapters: - name: getting-started-jp title: Getting Started description: A gentle introduction to programming. lessons: - getting-started-jp/hello-joy-jp.md - getting-started-jp/hello-python-jp.md - name: drawing-shapes-jp title: Drawing Shapes description: ' Write small programs to draw simple shapes. ' lessons: - drawing-shapes-jp/drawing-circles-jp.md - drawing-shapes-jp/lines-and-polygons-jp.md Most of it is self explanatory. One thing that you have noticed is that all chapter, lesson and exercise names have a -jp suffix. We use a two-letter short code for course and use that as a suffix for all names used for the course to avoid conflicts with names used for some other courses. Please note that the name field is the course is the unique name that identifies that course in the system. For a lesson or an exercise, the name will be the filename sans the extension. Whenever you make changes to the course.yml , you just need to run: $ coursectl push-course That will push the course to the server and you should see the course updated on the site. Editing a lesson Let's first look at the strucure of a lesson. --- title: Hello, Python! include_in_preview: true --- In this lesson, we'll learn how to write simple Python programs. The file has two parts. The first one is YAML frontmatter, as used with Jekyll/github-pages.Everything after that is the contents of the lesson. The frontmatter typically contains the title and include_in_preview fields. The title field as the name suggests is the title of the lesson. The value of include_in_preview field decides whether or not a preview is shown to the users who have not joined the course. Typically, the preview is made available for the lessons in the first few chapters. Once you make changes to a lesson, you can push it to the server using: $ coursectl push getting-started-jp/hello-python-jp.md ... It is also possible to push multiple lessons at once: $ coursectl push getting-started-jp/*.md ... Adding a new lesson To add a new lesson, we need to create a new file in that directory corresponding to the chapter where want to add this lesson and also include it in the course.yml file under the lessons of that chapter. Once these changes are done, we need to push the lesson and then push the course. $ coursectl push-lesson getting-started-jp/new-lesson-jp.md ... $ coursectl push-course ... Adding/editing an exercise Exercises are stored in exercise/*.yml . You can make changes to an existing exercise or create a new one. Once your exercise is ready, you need to push the exercise. $ coursectl push-exercise exercises/circle-jp.yml ... You an push all exercises at once using: $ coursectl push-exercise exercises/*.yml The coursectl will first test if there are any modifications and update only the ones that have been modified. To include an exercise in a lesson, use the following markup. {{ Exercise(\"circle-jp\") }}","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"To install coursectl , install the following command from command-line: $ pip install https://github.com/fossunited/coursectl/zipball/main","title":"Installation"},{"location":"getting-started/#configuration","text":"Using coursectl requires api key and api secret. Please ask the admin of the platform to create api key and secret for you. Once you have the api key and secret, use the following command to configure coursectl . $ coursectl configure frappe_site_url: https://mon.school/ frappe_api_key: XXXXX frappe_api_secret: YYYYY Once you configure coursectl you can verify it using the whoami command. $ coursectl whoami foo@bar.com TODO: explain about using multiple profiles","title":"Configuration"},{"location":"getting-started/#clone-your-course","text":"The first step after you configure your environment is to clone your course. $ coursectl clone the-joy-of-programming ... This command will clone the specified course, all its chapters, lessons and exercises and saves them to the current directory. The directory strucutre will be in the following structure: . \u251c\u2500\u2500 course.yml \u251c\u2500\u2500 getting-started-jp \u2502 \u251c\u2500\u2500 hello-joy-jp.md \u2502 \u2514\u2500\u2500 hello-python-jp.md \u251c\u2500\u2500 drawing-shapes-jp \u2502 \u251c\u2500\u2500 drawing-circles-jp.md \u2502 \u251c\u2500\u2500 lines-and-polygons-jp.md \u251c\u2500\u2500 exercises \u2502 \u251c\u2500\u2500 circle-jp.yml \u2502 \u251c\u2500\u2500 concentric-circles-x3-jp.yml \u2502 \u251c\u2500\u2500 draw-rectangle-jp.yml \u2502 \u251c\u2500\u2500 six-circles-in-a-line-jp.yml The course.yml file will contain the information about the course and all the chapters. There will be one directory for each chapter and each lesson in that chapter will be stored as a markdown file. All the exercisies are placed in the exercises/ diirectory as YAML files.","title":"Clone Your Course"},{"location":"getting-started/#editing-course-and-chapters","text":"The course and chapter info is stored in the course.yml file. This file must be edited to update the following: title of the course short intro of the course description of the course title of a chapter description of a chapter lessons that are part of a chapter Let's understand the format of the course.yml file. name: the-joy-of-programming is_published: 1 title: The Joy of Programming short_introduction: 'Start your journey into the magical world of programming, by writing programs to create amusing patterns. ' description: | Programming is fun. How about learning programming by writing programs to make the computer draw interesting shapes? In this course, you'll write programs to draw simple shapes and move on to draw more and more complex shapes by applying different ideas of programming introduced gradually through out the course. chapters: - name: getting-started-jp title: Getting Started description: A gentle introduction to programming. lessons: - getting-started-jp/hello-joy-jp.md - getting-started-jp/hello-python-jp.md - name: drawing-shapes-jp title: Drawing Shapes description: ' Write small programs to draw simple shapes. ' lessons: - drawing-shapes-jp/drawing-circles-jp.md - drawing-shapes-jp/lines-and-polygons-jp.md Most of it is self explanatory. One thing that you have noticed is that all chapter, lesson and exercise names have a -jp suffix. We use a two-letter short code for course and use that as a suffix for all names used for the course to avoid conflicts with names used for some other courses. Please note that the name field is the course is the unique name that identifies that course in the system. For a lesson or an exercise, the name will be the filename sans the extension. Whenever you make changes to the course.yml , you just need to run: $ coursectl push-course That will push the course to the server and you should see the course updated on the site.","title":"Editing Course and Chapters"},{"location":"getting-started/#editing-a-lesson","text":"Let's first look at the strucure of a lesson. --- title: Hello, Python! include_in_preview: true --- In this lesson, we'll learn how to write simple Python programs. The file has two parts. The first one is YAML frontmatter, as used with Jekyll/github-pages.Everything after that is the contents of the lesson. The frontmatter typically contains the title and include_in_preview fields. The title field as the name suggests is the title of the lesson. The value of include_in_preview field decides whether or not a preview is shown to the users who have not joined the course. Typically, the preview is made available for the lessons in the first few chapters. Once you make changes to a lesson, you can push it to the server using: $ coursectl push getting-started-jp/hello-python-jp.md ... It is also possible to push multiple lessons at once: $ coursectl push getting-started-jp/*.md ...","title":"Editing a lesson"},{"location":"getting-started/#adding-a-new-lesson","text":"To add a new lesson, we need to create a new file in that directory corresponding to the chapter where want to add this lesson and also include it in the course.yml file under the lessons of that chapter. Once these changes are done, we need to push the lesson and then push the course. $ coursectl push-lesson getting-started-jp/new-lesson-jp.md ... $ coursectl push-course ...","title":"Adding a new lesson"},{"location":"getting-started/#addingediting-an-exercise","text":"Exercises are stored in exercise/*.yml . You can make changes to an existing exercise or create a new one. Once your exercise is ready, you need to push the exercise. $ coursectl push-exercise exercises/circle-jp.yml ... You an push all exercises at once using: $ coursectl push-exercise exercises/*.yml The coursectl will first test if there are any modifications and update only the ones that have been modified. To include an exercise in a lesson, use the following markup. {{ Exercise(\"circle-jp\") }}","title":"Adding/editing an exercise"},{"location":"reference/","text":"Reference coursectl clone Clones a course from the server. $ coursectl clone the-joy-programming ... This fectches the entire course and writes it as files into the current directory. The generated files include: - course.yml file with course and chapter info - one file for each lesson with name $chapter_name/$lesson_name.md - one file for each exercise stored in exercises/$exercise_name.yml coursectl configure Prompts for site url and api credentials and saves them in ~/.config/frappe/config file. $ coursectl configure frappe_site_url: https://mon.school/ frappe_api_key: XXXX frappe_api_secret: YYYY write config to /home/anand/.config/frappe/config The coursectl command supports multiple profiles and by default, it uses a profile with name default . A different profile can be configured by passing global option --profile . $ coursectl --profile local configure frappe_site_url: http://mon.localhost:8000/ frappe_api_key: XXXX frappe_api_secret: YYYY write config to /home/anand/.config/frappe/config coursectl pull-lesson Pulls a lesson from the server and saves it locally. $ coursectl pull-lesson hello-python http://mon.school/ -- pulling lesson hello-python ... writing file getting-started/hello-python.md The lesson will be saved as $chapter/$lesson.md ARGUMENTS: name : name of the lesson to pull coursectl push-course Updates the course and chapters from course.yml file. $ coursectl push-course Chapter getting-started: updated Chapter drawing-shapes: updated This also updates the lessons linked to each chapter, but it doesn't update the content of the lessons. coursectl push-lesson Pushes one or more lessons to the server. $ coursectl push-lesson getting-started/hello-joy.md getting-started/hello-python.md http://mon.school/ -- pushing lesson getting-started/hello-joy.md http://mon.school/ -- pushing lesson getting-started/hello-python.md ARGUMENTS: filenames : paths to lesson files to be pushed coursectl version Prints the version of the coursectl command. $ coursectl version 0.1.0 coursectl whoami Prints the email of the user with the specified api key. $ coursectl whoami foo@bar.com","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#coursectl-clone","text":"Clones a course from the server. $ coursectl clone the-joy-programming ... This fectches the entire course and writes it as files into the current directory. The generated files include: - course.yml file with course and chapter info - one file for each lesson with name $chapter_name/$lesson_name.md - one file for each exercise stored in exercises/$exercise_name.yml","title":"coursectl clone"},{"location":"reference/#coursectl-configure","text":"Prompts for site url and api credentials and saves them in ~/.config/frappe/config file. $ coursectl configure frappe_site_url: https://mon.school/ frappe_api_key: XXXX frappe_api_secret: YYYY write config to /home/anand/.config/frappe/config The coursectl command supports multiple profiles and by default, it uses a profile with name default . A different profile can be configured by passing global option --profile . $ coursectl --profile local configure frappe_site_url: http://mon.localhost:8000/ frappe_api_key: XXXX frappe_api_secret: YYYY write config to /home/anand/.config/frappe/config","title":"coursectl configure"},{"location":"reference/#coursectl-pull-lesson","text":"Pulls a lesson from the server and saves it locally. $ coursectl pull-lesson hello-python http://mon.school/ -- pulling lesson hello-python ... writing file getting-started/hello-python.md The lesson will be saved as $chapter/$lesson.md ARGUMENTS: name : name of the lesson to pull","title":"coursectl pull-lesson"},{"location":"reference/#coursectl-push-course","text":"Updates the course and chapters from course.yml file. $ coursectl push-course Chapter getting-started: updated Chapter drawing-shapes: updated This also updates the lessons linked to each chapter, but it doesn't update the content of the lessons.","title":"coursectl push-course"},{"location":"reference/#coursectl-push-lesson","text":"Pushes one or more lessons to the server. $ coursectl push-lesson getting-started/hello-joy.md getting-started/hello-python.md http://mon.school/ -- pushing lesson getting-started/hello-joy.md http://mon.school/ -- pushing lesson getting-started/hello-python.md ARGUMENTS: filenames : paths to lesson files to be pushed","title":"coursectl push-lesson"},{"location":"reference/#coursectl-version","text":"Prints the version of the coursectl command. $ coursectl version 0.1.0","title":"coursectl version"},{"location":"reference/#coursectl-whoami","text":"Prints the email of the user with the specified api key. $ coursectl whoami foo@bar.com","title":"coursectl whoami"}]}